{"ast":null,"code":"import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_v_data_table_server = _resolveComponent(\"v-data-table-server\");\n  return _openBlock(), _createBlock(_component_v_data_table_server, {\n    \"items-per-page\": _ctx.itemsPerPage,\n    \"onUpdate:itemsPerPage\": _cache[0] || (_cache[0] = $event => _ctx.itemsPerPage = $event),\n    headers: _ctx.headers,\n    \"items-length\": _ctx.totalItems,\n    items: _ctx.serverItems,\n    loading: _ctx.loading,\n    class: \"elevation-1\",\n    \"item-value\": \"name\",\n    \"onUpdate:options\": $options.loadItems\n  }, null, 8 /* PROPS */, [\"items-per-page\", \"headers\", \"items-length\", \"items\", \"loading\", \"onUpdate:options\"]);\n}","map":{"version":3,"names":["_createBlock","_component_v_data_table_server","_ctx","itemsPerPage","$event","headers","totalItems","items","serverItems","loading","class","$options","loadItems"],"sources":["/Users/mauroroger/Desktop/diretorio-digital/front-end-diretorio-digital/front-end/src/components/Table.vue"],"sourcesContent":["<template>\n    <v-data-table-server\n      v-model:items-per-page=\"itemsPerPage\"\n      :headers=\"headers\"\n      :items-length=\"totalItems\"\n      :items=\"serverItems\"\n      :loading=\"loading\"\n      class=\"elevation-1\"\n      item-value=\"name\"\n      @update:options=\"loadItems\"\n    ></v-data-table-server>\n</template>\n\n<script>\n  const desserts = [\n    {\n      name: 'Frozen Yogurt',\n      calories: 159,\n      fat: 6.0,\n      carbs: 24,\n      protein: 4.0,\n      iron: '1',\n    },\n    {\n      name: 'Jelly bean',\n      calories: 375,\n      fat: 0.0,\n      carbs: 94,\n      protein: 0.0,\n      iron: '0',\n    },\n    {\n      name: 'KitKat',\n      calories: 518,\n      fat: 26.0,\n      carbs: 65,\n      protein: 7,\n      iron: '6',\n    },\n    {\n      name: 'Eclair',\n      calories: 262,\n      fat: 16.0,\n      carbs: 23,\n      protein: 6.0,\n      iron: '7',\n    },\n    {\n      name: 'Gingerbread',\n      calories: 356,\n      fat: 16.0,\n      carbs: 49,\n      protein: 3.9,\n      iron: '16',\n    },\n    {\n      name: 'Ice cream sandwich',\n      calories: 237,\n      fat: 9.0,\n      carbs: 37,\n      protein: 4.3,\n      iron: '1',\n    },\n    {\n      name: 'Lollipop',\n      calories: 392,\n      fat: 0.2,\n      carbs: 98,\n      protein: 0,\n      iron: '2',\n    },\n    {\n      name: 'Cupcake',\n      calories: 305,\n      fat: 3.7,\n      carbs: 67,\n      protein: 4.3,\n      iron: '8',\n    },\n    {\n      name: 'Honeycomb',\n      calories: 408,\n      fat: 3.2,\n      carbs: 87,\n      protein: 6.5,\n      iron: '45',\n    },\n    {\n      name: 'Donut',\n      calories: 452,\n      fat: 25.0,\n      carbs: 51,\n      protein: 4.9,\n      iron: '22',\n    },\n  ]\n\n  const FakeAPI = {\n    async fetch ({ page, itemsPerPage, sortBy }) {\n      return new Promise(resolve => {\n        setTimeout(() => {\n          const start = (page - 1) * itemsPerPage\n          const end = start + itemsPerPage\n          const items = desserts.slice()\n\n          if (sortBy.length) {\n            const sortKey = sortBy[0].key\n            const sortOrder = sortBy[0].order\n            items.sort((a, b) => {\n              const aValue = a[sortKey]\n              const bValue = b[sortKey]\n              return sortOrder === 'desc' ? bValue - aValue : aValue - bValue\n            })\n          }\n\n          const paginated = items.slice(start, end)\n\n          resolve({ items: paginated, total: items.length })\n        }, 500)\n      })\n    },\n  }\n\n  export default {\n    data: () => ({\n      itemsPerPage: 5,\n      headers: [\n        {\n          title: 'Dessert (100g serving)',\n          align: 'start',\n          sortable: false,\n          key: 'name',\n        },\n        { title: 'Calories', key: 'calories', align: 'end' },\n        { title: 'Fat (g)', key: 'fat', align: 'end' },\n        { title: 'Carbs (g)', key: 'carbs', align: 'end' },\n        { title: 'Protein (g)', key: 'protein', align: 'end' },\n        { title: 'Iron (%)', key: 'iron', align: 'end' },\n      ],\n      serverItems: [],\n      loading: true,\n      totalItems: 0,\n    }),\n    methods: {\n      loadItems ({ page, itemsPerPage, sortBy }) {\n        this.loading = true\n        FakeAPI.fetch({ page, itemsPerPage, sortBy }).then(({ items, total }) => {\n          this.serverItems = items\n          this.totalItems = total\n          this.loading = false\n        })\n      },\n    },\n  }\n</script>"],"mappings":";;;uBACIA,YAAA,CASuBC,8BAAA;IARb,gBAAc,EAAEC,IAAA,CAAAC,YAAY;iEAAZD,IAAA,CAAAC,YAAY,GAAAC,MAAA;IACnCC,OAAO,EAAEH,IAAA,CAAAG,OAAO;IAChB,cAAY,EAAEH,IAAA,CAAAI,UAAU;IACxBC,KAAK,EAAEL,IAAA,CAAAM,WAAW;IAClBC,OAAO,EAAEP,IAAA,CAAAO,OAAO;IACjBC,KAAK,EAAC,aAAa;IACnB,YAAU,EAAC,MAAM;IAChB,kBAAc,EAAEC,QAAA,CAAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
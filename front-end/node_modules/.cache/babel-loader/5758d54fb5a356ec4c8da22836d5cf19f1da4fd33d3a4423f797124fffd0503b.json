{"ast":null,"code":"export default {\n  props: ['headers'],\n  data: () => ({\n    itemsPerPage: 5,\n    headers: [{\n      title: 'Dessert (100g serving)',\n      align: 'start',\n      sortable: false,\n      key: 'name'\n    }, {\n      title: 'Calories',\n      key: 'calories',\n      align: 'end'\n    }, {\n      title: 'Fat (g)',\n      key: 'fat',\n      align: 'end'\n    }, {\n      title: 'Carbs (g)',\n      key: 'carbs',\n      align: 'end'\n    }, {\n      title: 'Protein (g)',\n      key: 'protein',\n      align: 'end'\n    }, {\n      title: 'Iron (%)',\n      key: 'iron',\n      align: 'end'\n    }],\n    search: '',\n    serverItems: [],\n    loading: true,\n    totalItems: 0\n  }),\n  methods: {\n    loadItems({\n      page,\n      itemsPerPage,\n      sortBy\n    }) {\n      this.loading = true;\n      FakeAPI.fetch({\n        page,\n        itemsPerPage,\n        sortBy\n      }).then(({\n        items,\n        total\n      }) => {\n        this.serverItems = items;\n        this.totalItems = total;\n        this.loading = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["props","data","itemsPerPage","headers","title","align","sortable","key","search","serverItems","loading","totalItems","methods","loadItems","page","sortBy","FakeAPI","fetch","then","items","total"],"sources":["/Users/mauroroger/Desktop/diretorio-digital/front-end-diretorio-digital/front-end/src/components/Table.vue"],"sourcesContent":["<template>\n    <v-table>\n        <thead>\n        <tr>\n            <th  v-for=\"item in headers\" v-once class=\"text-left\">item</th>\n        </tr>\n        </thead>\n        <tbody>\n        <tr\n            v-for=\"item in desserts\"\n            :key=\"item.name\"\n        >\n            <td>{{ item.name }}</td>\n            <td>{{ item.calories }}</td>\n        </tr>\n        </tbody>\n    </v-table>\n</template>\n<script>\nexport default {\n    props: ['headers',],\n    data: () => ({\n        itemsPerPage: 5,\n        headers: [\n            {\n            title: 'Dessert (100g serving)',\n            align: 'start',\n            sortable: false,\n            key: 'name',\n            },\n            { title: 'Calories', key: 'calories', align: 'end' },\n            { title: 'Fat (g)', key: 'fat', align: 'end' },\n            { title: 'Carbs (g)', key: 'carbs', align: 'end' },\n            { title: 'Protein (g)', key: 'protein', align: 'end' },\n            { title: 'Iron (%)', key: 'iron', align: 'end' },\n        ],\n        search: '',\n        serverItems: [],\n        loading: true,\n        totalItems: 0,\n    }),\n\n    methods: {\n    loadItems ({ page, itemsPerPage, sortBy }) {\n        this.loading = true\n        FakeAPI.fetch({ page, itemsPerPage, sortBy }).then(({ items, total }) => {\n        this.serverItems = items\n        this.totalItems = total\n        this.loading = false\n        })\n    },\n    },\n}\n</script>"],"mappings":"AAmBA,eAAe;EACXA,KAAK,EAAE,CAAC,SAAS,CAAE;EACnBC,IAAI,EAAEA,CAAA,MAAO;IACTC,YAAY,EAAE,CAAC;IACfC,OAAO,EAAE,CACL;MACAC,KAAK,EAAE,wBAAwB;MAC/BC,KAAK,EAAE,OAAO;MACdC,QAAQ,EAAE,KAAK;MACfC,GAAG,EAAE;IACL,CAAC,EACD;MAAEH,KAAK,EAAE,UAAU;MAAEG,GAAG,EAAE,UAAU;MAAEF,KAAK,EAAE;IAAM,CAAC,EACpD;MAAED,KAAK,EAAE,SAAS;MAAEG,GAAG,EAAE,KAAK;MAAEF,KAAK,EAAE;IAAM,CAAC,EAC9C;MAAED,KAAK,EAAE,WAAW;MAAEG,GAAG,EAAE,OAAO;MAAEF,KAAK,EAAE;IAAM,CAAC,EAClD;MAAED,KAAK,EAAE,aAAa;MAAEG,GAAG,EAAE,SAAS;MAAEF,KAAK,EAAE;IAAM,CAAC,EACtD;MAAED,KAAK,EAAE,UAAU;MAAEG,GAAG,EAAE,MAAM;MAAEF,KAAK,EAAE;IAAM,CAAC,CACnD;IACDG,MAAM,EAAE,EAAE;IACVC,WAAW,EAAE,EAAE;IACfC,OAAO,EAAE,IAAI;IACbC,UAAU,EAAE;EAChB,CAAC,CAAC;EAEFC,OAAO,EAAE;IACTC,SAAQA,CAAG;MAAEC,IAAI;MAAEZ,YAAY;MAAEa;IAAO,CAAC,EAAE;MACvC,IAAI,CAACL,OAAM,GAAI,IAAG;MAClBM,OAAO,CAACC,KAAK,CAAC;QAAEH,IAAI;QAAEZ,YAAY;QAAEa;MAAO,CAAC,CAAC,CAACG,IAAI,CAAC,CAAC;QAAEC,KAAK;QAAEC;MAAM,CAAC,KAAK;QACzE,IAAI,CAACX,WAAU,GAAIU,KAAI;QACvB,IAAI,CAACR,UAAS,GAAIS,KAAI;QACtB,IAAI,CAACV,OAAM,GAAI,KAAI;MACnB,CAAC;IACL;EACA;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}
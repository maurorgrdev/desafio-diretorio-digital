{"ast":null,"code":"const desserts = [{\n  name: 'Frozen Yogurt',\n  calories: 159,\n  fat: 6.0,\n  carbs: 24,\n  protein: 4.0,\n  iron: '1'\n}, {\n  name: 'Jelly bean',\n  calories: 375,\n  fat: 0.0,\n  carbs: 94,\n  protein: 0.0,\n  iron: '0'\n}, {\n  name: 'KitKat',\n  calories: 518,\n  fat: 26.0,\n  carbs: 65,\n  protein: 7,\n  iron: '6'\n}, {\n  name: 'Eclair',\n  calories: 262,\n  fat: 16.0,\n  carbs: 23,\n  protein: 6.0,\n  iron: '7'\n}, {\n  name: 'Gingerbread',\n  calories: 356,\n  fat: 16.0,\n  carbs: 49,\n  protein: 3.9,\n  iron: '16'\n}, {\n  name: 'Ice cream sandwich',\n  calories: 237,\n  fat: 9.0,\n  carbs: 37,\n  protein: 4.3,\n  iron: '1'\n}, {\n  name: 'Lollipop',\n  calories: 392,\n  fat: 0.2,\n  carbs: 98,\n  protein: 0,\n  iron: '2'\n}, {\n  name: 'Cupcake',\n  calories: 305,\n  fat: 3.7,\n  carbs: 67,\n  protein: 4.3,\n  iron: '8'\n}, {\n  name: 'Honeycomb',\n  calories: 408,\n  fat: 3.2,\n  carbs: 87,\n  protein: 6.5,\n  iron: '45'\n}, {\n  name: 'Donut',\n  calories: 452,\n  fat: 25.0,\n  carbs: 51,\n  protein: 4.9,\n  iron: '22'\n}];\nconst FakeAPI = {\n  async fetch({\n    page,\n    itemsPerPage,\n    sortBy\n  }) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const start = (page - 1) * itemsPerPage;\n        const end = start + itemsPerPage;\n        const items = desserts.slice();\n        if (sortBy.length) {\n          const sortKey = sortBy[0].key;\n          const sortOrder = sortBy[0].order;\n          items.sort((a, b) => {\n            const aValue = a[sortKey];\n            const bValue = b[sortKey];\n            return sortOrder === 'desc' ? bValue - aValue : aValue - bValue;\n          });\n        }\n        const paginated = items.slice(start, end);\n        resolve({\n          items: paginated,\n          total: items.length\n        });\n      }, 500);\n    });\n  }\n};\nexport default {\n  data: () => ({\n    itemsPerPage: 5,\n    headers: [{\n      title: 'Dessert (100g serving)',\n      align: 'start',\n      sortable: false,\n      key: 'name'\n    }, {\n      title: 'Calories',\n      key: 'calories',\n      align: 'end'\n    }, {\n      title: 'Fat (g)',\n      key: 'fat',\n      align: 'end'\n    }, {\n      title: 'Carbs (g)',\n      key: 'carbs',\n      align: 'end'\n    }, {\n      title: 'Protein (g)',\n      key: 'protein',\n      align: 'end'\n    }, {\n      title: 'Iron (%)',\n      key: 'iron',\n      align: 'end'\n    }],\n    search: '',\n    serverItems: [],\n    loading: true,\n    totalItems: 0\n  }),\n  methods: {\n    loadItems({\n      page,\n      itemsPerPage,\n      sortBy\n    }) {\n      this.loading = true;\n      FakeAPI.fetch({\n        page,\n        itemsPerPage,\n        sortBy\n      }).then(({\n        items,\n        total\n      }) => {\n        this.serverItems = items;\n        this.totalItems = total;\n        this.loading = false;\n      });\n    }\n  }\n};","map":{"version":3,"names":["desserts","name","calories","fat","carbs","protein","iron","FakeAPI","fetch","page","itemsPerPage","sortBy","Promise","resolve","setTimeout","start","end","items","slice","length","sortKey","key","sortOrder","order","sort","a","b","aValue","bValue","paginated","total","data","headers","title","align","sortable","search","serverItems","loading","totalItems","methods","loadItems","then"],"sources":["/Users/mauroroger/Desktop/diretorio-digital/front-end-diretorio-digital/front-end/src/components/Table.vue"],"sourcesContent":["<template>\n    <v-data-table-server\n      v-model:items-per-page=\"itemsPerPage\"\n      :headers=\"headers\"\n      :items-length=\"totalItems\"\n      :items=\"serverItems\"\n      :loading=\"loading\"\n      :search=\"search\"\n      class=\"elevation-1\"\n      item-value=\"name\"\n      @update:options=\"loadItems\"\n    ></v-data-table-server>\n  </template>\n  <script>\n    const desserts = [\n      {\n        name: 'Frozen Yogurt',\n        calories: 159,\n        fat: 6.0,\n        carbs: 24,\n        protein: 4.0,\n        iron: '1',\n      },\n      {\n        name: 'Jelly bean',\n        calories: 375,\n        fat: 0.0,\n        carbs: 94,\n        protein: 0.0,\n        iron: '0',\n      },\n      {\n        name: 'KitKat',\n        calories: 518,\n        fat: 26.0,\n        carbs: 65,\n        protein: 7,\n        iron: '6',\n      },\n      {\n        name: 'Eclair',\n        calories: 262,\n        fat: 16.0,\n        carbs: 23,\n        protein: 6.0,\n        iron: '7',\n      },\n      {\n        name: 'Gingerbread',\n        calories: 356,\n        fat: 16.0,\n        carbs: 49,\n        protein: 3.9,\n        iron: '16',\n      },\n      {\n        name: 'Ice cream sandwich',\n        calories: 237,\n        fat: 9.0,\n        carbs: 37,\n        protein: 4.3,\n        iron: '1',\n      },\n      {\n        name: 'Lollipop',\n        calories: 392,\n        fat: 0.2,\n        carbs: 98,\n        protein: 0,\n        iron: '2',\n      },\n      {\n        name: 'Cupcake',\n        calories: 305,\n        fat: 3.7,\n        carbs: 67,\n        protein: 4.3,\n        iron: '8',\n      },\n      {\n        name: 'Honeycomb',\n        calories: 408,\n        fat: 3.2,\n        carbs: 87,\n        protein: 6.5,\n        iron: '45',\n      },\n      {\n        name: 'Donut',\n        calories: 452,\n        fat: 25.0,\n        carbs: 51,\n        protein: 4.9,\n        iron: '22',\n      },\n    ]\n  \n    const FakeAPI = {\n      async fetch ({ page, itemsPerPage, sortBy }) {\n        return new Promise(resolve => {\n          setTimeout(() => {\n            const start = (page - 1) * itemsPerPage\n            const end = start + itemsPerPage\n            const items = desserts.slice()\n  \n            if (sortBy.length) {\n              const sortKey = sortBy[0].key\n              const sortOrder = sortBy[0].order\n              items.sort((a, b) => {\n                const aValue = a[sortKey]\n                const bValue = b[sortKey]\n                return sortOrder === 'desc' ? bValue - aValue : aValue - bValue\n              })\n            }\n  \n            const paginated = items.slice(start, end)\n  \n            resolve({ items: paginated, total: items.length })\n          }, 500)\n        })\n      },\n    }\n  \n    export default {\n      data: () => ({\n        itemsPerPage: 5,\n        headers: [\n          {\n            title: 'Dessert (100g serving)',\n            align: 'start',\n            sortable: false,\n            key: 'name',\n          },\n          { title: 'Calories', key: 'calories', align: 'end' },\n          { title: 'Fat (g)', key: 'fat', align: 'end' },\n          { title: 'Carbs (g)', key: 'carbs', align: 'end' },\n          { title: 'Protein (g)', key: 'protein', align: 'end' },\n          { title: 'Iron (%)', key: 'iron', align: 'end' },\n        ],\n        search: '',\n        serverItems: [],\n        loading: true,\n        totalItems: 0,\n      }),\n      methods: {\n        loadItems ({ page, itemsPerPage, sortBy }) {\n          this.loading = true\n          FakeAPI.fetch({ page, itemsPerPage, sortBy }).then(({ items, total }) => {\n            this.serverItems = items\n            this.totalItems = total\n            this.loading = false\n          })\n        },\n      },\n    }\n  </script>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}